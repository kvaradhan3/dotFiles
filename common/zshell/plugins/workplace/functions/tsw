#! /bin/zsh

emulate -L zsh -o pipe_fail -o err_return

export TELEPORT_LOGIN=${TELEPORT_LOGIN:-eng}
export TELEPORT_ADD_KEYS_TO_AGENT=no
export TELEPORT_AUTH=okta_zscorp

declare _tsw_friendly

function tsw {
    local -A _teleport_clusters=(
        #env         proxy                    fqdn              friendly
        'prod'      'prod.tpt.zpath.net     prod.zpath.net      Production'
        'mod'       'tpt.zpagov.us          zpagov.us           Fed (Moderate)'
        'moderate'  'tpt.zpagov.us          zpagov.us           Fed (Moderate)'
        'gov'       'tpt.zpagov.net         zpagov.net          Gov'
        'beta'      'beta.tpt.zpath.net     zpabeta.net         Beta'
        'eng'       'eng.tpt.zpath.net      zpath.net           Engineering'
    )

    local -A _tsw_convenience=(
        'clear'     'Clear teleport configurations'
        'status'    'Print current teleport status'
        'logout'    'Logout (and clear) current configuration'
        'login'     'Login to specified cluster'
        'clusters'  'List current known clusters'
        'labels'    'Show labels that can be used in tsh search'
        'my-labels' 'Show label settings for my machines'
        'ls'        'List my machines'
        'go'        'Find and go to a single host using attribute search'
        'help'      'Print this help menu'
    )

    _tsw_friendly=""

    if [[ $1 = "" ]] ; then
        tsw help
        set -- 'status'
    fi

    if [[ -v _teleport_clusters[$1] ]] ; then
        local -a _deets=( ${(z)${_teleport_clusters[$1]}} )
        export TELEPORT_PROXY=${_deets[1]}
        export TSW_FQDN=${_deets[2]}
        _tsw_friendly="${_deets:2}"
        log Switched to "$_tsw_friendly" Teleport Cluster, using $TELEPORT_PROXY
        return
    fi

    if [[ -v _tsw_convenience[$1] ]] ; then

        local cmd=$1
        shift

        case "$cmd" in
            # Do not disrupt the next two. The third block (login) can move
            # but it would be better to-not-to...
            logout)
                tsh  $cmd "$@"
                info $cmd ${_tsw_friendly}
                ;&
            login|clear)        # clear function, also done before login.
                unset TELEPORT_PROXY TSW_FQDN

                _tsw_friendly=""
                ;|
            login)
                if (( ${${(k)_teleport_clusters}[(I)$1]} )); then
                    local -a _deets=( ${(z)${_teleport_clusters[$1]}} )
                    tsh $cmd --proxy "${_deets[1]}" "${@:2}"
                else
                    tsh $cmd "$@"
                fi
                _tsw_friendly=$(tsh status --format=json | jq .active.profile)
                ;;

            clusters)
                local cluster params
                print "cluster,proxy FQDN,FQDN,Name"
                for cluster params in ${(kv)_teleport_clusters}; do
                    local -a _deets=( ${(z)params} )
                    print "${cluster},${_deets[1]},${_deets[2]},${_deets:2}"
                done
                ;;

            status)
                tsh $cmd "$@"
                ;;

            help)
                echo
                usage "[${(k)_teleport_clusters// /|}]"
                print "  Additional convenience functions:"
                for key help in ${(kv)_tsw_convenience}; do
                    print "    $key\t\t$help"
                done
                print "  defaults with no arguments, prints status and help"
                print "  Commands not understood are sent to tsh, as tsh $@"
                ;;

            *)
                if [[ $(whence -w _tsw_${cmd}) = *function ]] ; then
                    set -- $(_tsw__sanitize_arguments "$@")
                    if _tsw__sane $cmd "$@" ; then
                        _tsw_${cmd} "$@"
                    fi
                    return
                else
                    error $cmd is not implemented.
                fi
                ;;
        esac
        return
    fi
    
    tsh "$@"
}

function _tsw__sanitize_arguments {
    #
    # Sanitize arguments to tsh
    #
    ##
    # 1. remove --mine, if present and add aws/Owner.
    if (( $@[(I)--mine] ))
    then
        # Using $@ as array, remove '--mine' from it.
        # Add aws/Owner as first argument
        set -- "aws/Owner=$USER@zscaler.com" ${(@)@:#--mine}
    fi

    ##
    # 2. if there is more than 1 key/value pair, it has to be <comma> separated.
    local kvpairs=
    for i in "$@" ; do
        if [[ $i == *=* ]] && [[ $i != --* ]] ; then
            # k=y and not --option=val
            set -- ${(@)@:#$i}
            kvpairs+=,$i
        fi
    done
    set -- ${kvpairs//#,/} "$@"

    ##
    # 3. convenience quirk, if only one arg, and it does not look like a key=val
    #    and not an option
    if [[ $# == 1 ]] && [[ $1 != *=* ]] && [[ $1 != --* ]] ; then
        set -- --search "$@"
    fi
    
    echo "$@"
}

function _tsw__sane {
    #
    # Check that the sanitized arguments dont cause additional errors.
    # allow, no args, or arg == --help|-h.
    # makes error messages consistent this way.
    #
    CMD="${funcstack[2]:-"${FUNCNAME[2]}"}"
    OPT=$1 ; shift

    if [[ $# = 0 ]] || [[ " $@ " =~ ' -h | --help ' ]] ; then
        return 0
    fi

    case $(tsh ls --format=json "$@"  2>&- | jq length) in
    '')
        error " $OPT: unknown error" $(tsh ls --format=json "$@" 2>&1)
        return 1
        ;;
    0)
        error " $OPT: No host matched for criteria:" "$@" >&2
        return 1
        ;;
    *)
        return 0
        ;;
    esac
}

autoload -Uz _tsw_go
autoload -Uz _tsw_goto
autoload -Uz _tsw_labels
autoload -Uz _tsw_ls-r
autoload -Uz _tsw_mine
autoload -Uz _tsw_my-labels
autoload -Uz _tsw_cheatsheet

tsw "$@"
