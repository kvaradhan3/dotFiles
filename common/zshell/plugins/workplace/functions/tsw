#! /bin/zsh

emulate -L zsh -o pipe_fail -o err_return

export TELEPORT_LOGIN=${TELEPORT_LOGIN:-eng}
export TELEPORT_ADD_KEYS_TO_AGENT=no
export TELEPORT_AUTH=okta_zscorp

declare _tsw_friendly

function tsw {
    local -A _teleport_clusters=(
        #env         proxy                    fqdn              friendly
        'prod'      'prod.tpt.zpath.net     prod.zpath.net      Production'
        'mod'       'tpt.zpagov.us          zpagov.us           Fed (Moderate)'
        'moderate'  'tpt.zpagov.us          zpagov.us           Fed (Moderate)'
        'gov'       'tpt.zpagov.net         zpagov.net          Gov'
        'beta'      'beta.tpt.zpath.net     zpabeta.net         Beta'
        'eng'       'eng.tpt.zpath.net      zpath.net           Engineering'
    )

    local -A _tsw_convenience=(
        'clear'     'Clear teleport configurations'
        'status'    'Print current teleport status'
        'logout'    'Logout (and clear) current configuration'
        'login'     'Login to specified cluster'
        'clusters'  'List current known clusters'
        'labels'    'Show labels that can be used in tsh search'
        'my-labels' 'Show label settings for my machines'
        'mine'      'List my machines'
        'goto'      'use fzf to find a machine to log into'
        'go'        'Find and go to a single host using attribute search'
        'go --mine' 'variant of go, to find hosts with aws/Owner attrs set'
        'ls-r'      'short for tsh ls --format=json'
        'help'      'Print this help menu'
        '-statusHelp' 'NO'
    )

    _tsw_friendly=""

    if [[ $1 = "" ]] ; then
        set -- '-statusHelp'
    else
        set -- "${(L)@}"
    fi

    if [[ -v _teleport_clusters[$1] ]] ; then
        local -a _deets=( ${(z)${_teleport_clusters[$1]}} )
        export TELEPORT_PROXY=${_deets[1]}
        export TSW_FQDN=${_deets[2]}
        _tsw_friendly="${_deets:2}"
        log Switched to "$_tsw_friendly" Teleport Cluster, using $TELEPORT_PROXY

    elif [[ -v _tsw_convenience[$1] ]] ; then

        local cmd=$1
        shift

        case "$cmd" in
            # Do not disrupt the next two. The third block (login) can move
            # but it would be better to-not-to...
            logout)
                tsh logout "$@"
                info logout out of ${_tsw_friendly}
                ;&
            login|clear)        # clear function, also done before login.
                unset TELEPORT_PROXY TSW_FQDN

                _tsw_friendly=""
                ;|
            login)
                if (( ${${(k)_teleport_clusters}[(I)$1]} )); then
                    local -a _deets=( ${(z)${_teleport_clusters[$1]}} )
                    tsh --proxy "${_deets[1]}" login "${@:2}"
                else
                    tsh "$@"
                fi
                _tsw_friendly=$(tsh status --format=json | jq .active.profile)
                ;;

            clusters)
                local cluster params
                print "cluster,proxy FQDN,FQDN,Name"
                for cluster params in ${(kv)_teleport_clusters}; do
                    local -a _deets=( ${(z)params} )
                    print "${cluster},${_deets[1]},${_deets[2]},${_deets:2}"
                done
                ;;
            status)
                tsh "$@"
                info logout out of ${_tsw_friendly}
                ;&

            # Generally do not disrupt these two being together...
            status|-statusHelp)
                tsh status "$@"
                ;|

            help|-statusHelp)
                echo
                usage "[${(k)_teleport_clusters// /|}]"
                print "  Additional convenience functions:"
                for key help in ${(kv)_tsw_convenience}; do
                    if [[ $key = -* ]] ; then
                        continue
                    fi
                    print "    $key\t\t$help"
                done
                print "  defaults with no arguments, prints status and help"
                print "  Commands not understood are sent to tsh, as tsh $@"
                ;;
            status)
                ;;
            *)
                if [[ $(whence -w _tsw_${cmd}) = *function ]] ; then
                    _tsw_${cmd} "$@"
                    return
                else
                    error $cmd is not implemented.
                fi
                ;;
        esac
    else
        tsh "$@"
    fi
}

 #
 # some aliases that we care about, once we are logged in...
 #
 alias tssh='tsh ssh'
 alias tsh-list-mine='tsh ls --format=json aws/Owner=$USER@zscaler.com'
 alias tsh-goto-mine='tsh ssh $(tsh ls \
                            --format=json aws/Owner=$USER@zscaler.com | \
                                jq -r .[].spec.hostname)'
autoload -Uz _tsw_go
autoload -Uz _tsw_goto
autoload -Uz _tsw_labels
autoload -Uz _tsw_ls-r
autoload -Uz _tsw_mine
autoload -Uz _tsw_my-labels
autoload -Uz _tsw_cheatsheet

tsw
