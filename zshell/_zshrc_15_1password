
# shellcheck shell=sh disable=SC3033,SC3011,SC3045
#
# SC3033: naming functions outside [a-zA-Z_][a-zA-Z0-9_]* is undefined.
# SC3044: In POSIX sh, disown is undefined.
#
# Requires tidy-viewer
#
FQDN=".1password.com"
CLIPBOARD_TIMEOUT=60	# keep pw in clipboard for this amt of time.

_1p__usage() {
    echo "usage: 1p [-w | -p] [-o raw|json] value" >&2
}

1p() {
    account=team-netskope
    output=default
    while getopts 'wpo:hs' c
    do
        case $c in
            w) account='team-netskope';;    # work
            p) account='my';;               # personal
            o) output=$OPTARG;;             # output format
            s)    op account get;
                  return 0 ;;
            h|?)  _1p__usage;
                  return 1;;
        esac
    done
    shift $((OPTIND-1))

    _1p__validate $account

    items="$(op item list --format=json                       |
             jq -rc '.[] | [ .category, .title, .id ] | @csv' |
             grep -i "$1")"

    if [ -z "$items" ] ; then
        printf "$0: no items for %s found\n" "$1" >&2
    elif [ "$(echo "$items" | wc -l)" -gt 1 ] ; then
        (
            print -P "%U%B__category__%b%u,%U%B__item name__%b%u,%U%B__item id__%b%u"
            echo "$items"
		# | column -ts,
        ) | tv 
    else
        # shellcheck disable=SC2034,SC3011
        # [SC2034] title appears unused.  by design
        # [SC3011] In POSIX sh, here-strings are undefined.
        IFS=, read -r category title id <<<"$items"
        category="$(eval echo "$category")"
        id="$(eval echo "$id")"

        (
          JSON="$(base64 <<<"$(op item get "$id" --format=json | jq -rc .)")"

          case $output in
          raw)    eval op item get "$id";;
          json)   echo "$JSON" | jq .   ;;
          *)      eval "_1p_$category" "$JSON" || eval op item get "$id";;
          esac
          unset JSON
        )
    fi
}


_1p__validate() {
    #
    # check if we are signed in to the right domain.
    #
    account="${1:-"my"}"
    domain="$(op account get --format=json 2>&- | jq -rc .domain)"
    if [ "$domain" != "$account" ] ; then
        # shellcheck disable=SC2046   # 1password returns a shell script.
        eval $(op signin --account "$account$FQDN")
    fi
}


_1p__secret_to_clipboard() {
    (
      _1p__extract "$@" | pbcopy
      (
        sleep "$CLIPBOARD_TIMEOUT"
        echo "" | pbcopy
      )  </dev/null >/dev/null 2>&1 &
      # shellcheck disable=SC3044  # In POSIX sh, 'disown' is undefined
      disown || true
    ) </dev/null >/dev/null 2>&1
}


_1p__extract() {
    JSON="$1"
    fld="$2"
    key="$3"
    val="${4:-"value"}"

    base64 -d <<<"$JSON" | jq -r '.fields[] | select(.'"$fld"' == "'"$key"'").'"$val"
}


_1p_API_CREDENTIAL() {
    JSON="$1"

    (
        printf "ID:,%s\n"       "$(base64 -d <<<"$JSON" | jq -r .id)"
        printf "Title:,%s\n"    "$(base64 -d <<<"$JSON" | jq -r .title)"

        printf "Token:,%s\n"    "********"
	# | column -ts,
    ) | tv -eR
    _1p__secret_to_clipboard "$JSON" label token
}


_1p_CREDIT_CARD() {
    JSON="$1"

    (
        printf "ID:,%s\n"       "$(base64 -d <<<"$JSON" | jq -r .id)"
        printf "Title:,%s\n"    "$(base64 -d <<<"$JSON" | jq -r .title)"

        printf "Cardholder Name:,%s\n"  "$(_1p__extract "$JSON" id cardholder)"
        printf "Card Number:,%s\n"      "$(_1p__extract "$JSON" id ccnum)"
        printf "CVV:,%s\n"              "********"
        printf "Expiry:,%s\n"           "$(_1p__extract "$JSON" id expiry)"
    # | column -s, -t
    ) | tv -eR
    _1p__secret_to_clipboard "$JSON" id cvv
}


_1p_LOGIN() {
    JSON="$1"

    (
        printf "ID:,%s\n"       "$(base64 -d <<<"$JSON" | jq -r .id)"
        printf "Title:,%s\n"    "$(base64 -d <<<"$JSON" | jq -r .title)"

        printf "Username:,%s\n"  "$(_1p__extract "$JSON" id username)"
        printf "Password:,%s\n"    "********"

        totp="$(_1p__extract "$JSON" label "One-time password" totp)"
        if [ -n "$totp" ] ; then
            printf "OTP:,%s\n"  "$totp"
        fi
    # | column -s, -t
    ) | tv -eRD

    section_id="$(base64 -d <<< "$JSON" |
                  jq -rc '.sections[]
                         | select(.label == "ADDITIONAL QUESTIONS") 
                         | .id // empty')"

    if [ -n "$section_id" ] ; then
		printf "\n        \e[%sm%s\e[%sm"   \
		       "$color[reverse]" "ADDITIONAL QUESTIONS" "$color[none]"
        {
          echo '__Challenge__,__Response__'
          base64 -d <<< "$JSON" | jq -rc '.fields[] 
                 | select(.section.id == "'"$section_id"'")
                 | [ .label, .value ]
                 | @csv'
        # | column -s, -t
        } | tv -eRD
    fi
    _1p__secret_to_clipboard "$JSON" id password
}


_1p_SSH_KEY() {
    JSON="$1"

    (
        printf "ID:,%s\n"       "$(base64 -d <<<"$JSON" | jq -r .id)"
        printf "Title:,%s\n"    "$(base64 -d <<<"$JSON" | jq -r .title)"

        printf "Key Type:,%s\n"    "$(_1p__extract "$JSON" id key_type)"
        printf "Fingerprint:,%s\n" "$(_1p__extract "$JSON" id fingerprint)"
        printf "Password:,%s\n"    "********"
    # | column -s, -t
    ) | tv -eR
    _1p__secret_to_clipboard "$JSON" label password
}
