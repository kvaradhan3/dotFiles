#! /bin/zsh
# shellcheck disable=SC2086,SC2278,SC2298,SC2296,SC2299
# SC2086 (info): Double quote to prevent globbing and word splitting.
# SC2296 (error): Parameter expansions can't start with (. Double check syntax.
# SC2298 (error): ${${x}} is invalid. For expansion, use ${x}.
#        For indirection, use arrays, ${!x} or (for sh) eval.
# SC2278 (error): $0 can't be assigned in Ksh (but it does reflect the current function).
# SC2299 (error): Parameter expansions can't be nested. Use temporary variables.
#

0="${ZERO:-${${0:#$ZSH_ARGZERO}:-${(%):-%N}}}"
0="${${(M)0:#/*}:-$PWD/$0}"

if [[ -z "${__1P[UTILITIES]}" ]]
then
    autoload -Uz _1p__utilities
    _1p__utilities
fi

#
# SC3044: In POSIX sh, disown is undefined.
#
# Requires tidy-viewer
#
local FQDN=".1password.com"
local CLIPBOARD_TIMEOUT=60	# keep pw in clipboard for this amt of time.

_1p__usage() {
    echo "usage: $(basename $0)  [-w | -p] [-o raw|json] value" >&2
}

#
# 1p main
#
__1P[account]=team-netskope
__1P[account]=my
__1P[outputf]=default

while getopts 'wpo:hs' c
do
    case $c in
        w) __1P[account]='team-netskope';;    # work
        p) __1P[account]='my';;               # personal
        o) __1P[outputf]=$OPTARG;;            # output format
        s)    op account get;
              return 0 ;;
        h|?)  _1p__usage;
              return 1;;
    esac
done
shift $((OPTIND-1))

_1p__validate $__1P[account]

local items="$(op item list --format=json                       |
               jq -rc '.[] | [ .category, .title, .id ] | @csv' |
               grep -i "$1")"

if [[ -z "$items" ]]
then
    printf "%s: no items for %s found\n" "$(basename $0)" "$1" >&2
elif [[ "$(echo "$items" | wc -l)" -gt 1 ]]
then
    (
        print "__category__","__item name__","__item id__"
        echo "$items"
    # | column -ts,
    ) | tidy-viewer

else
    # shellcheck disable=SC2034,SC3011
    # [SC2034] title appears unused.  by design
    # [SC3011] In POSIX sh, here-strings are undefined.
    IFS=, read -r category title id <<<"$items"
    category="$(eval echo "$category")"
    id="$(eval echo "$id")"

    JSON="$(base64 -w0 <(op item get "$id" --format=json))"
    case __1P[outputf] in
    raw)
        eval op item get "$id"
        ;;
    json)
        base64 -d <<<"$JSON" | jq .
        ;;
    *)
	if [[ __1P[FUNCTIONS] != *_1p_$category* ]]
	then
            autoload -Uz "_1p_$category"
	fi
        eval "_1p_$category" "$JSON" || eval op item get "$id"
        ;;
    esac
    unset JSON
fi
