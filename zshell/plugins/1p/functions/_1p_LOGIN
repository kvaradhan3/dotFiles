#! /bin/zsh
# shellcheck disable=SC2086,SC2278,SC2298,SC2296,SC2299
# SC2086 (info): Double quote to prevent globbing and word splitting.
# SC2296 (error): Parameter expansions can't start with (. Double check syntax.
# SC2298 (error): ${${x}} is invalid. For expansion, use ${x}.
#        For indirection, use arrays, ${!x} or (for sh) eval.
# SC2278 (error): $0 can't be assigned in Ksh (but it does reflect the current function).
# SC2299 (error): Parameter expansions can't be nested. Use temporary variables.
#

0="${ZERO:-${${0:#$ZSH_ARGZERO}:-${(%):-%N}}}"
0="${${(M)0:#/*}:-$PWD/$0}"

if [[ -z "${__1P[UTILITIES]}" ]]
then
    autoload -Uz _1p__utilities
    _1p__utilities

    __1P[FUNCTIONS]+=' _1p_LOGIN'
fi

local JSON="$1"

(
    printf "ID:,%s\n"       "$(_1p__b64decode <<<"$JSON" | jq -r .id)"
    printf "Title:,%s\n"    "$(_1p__b64decode <<<"$JSON" | jq -r .title)"

    printf "Username:,%s\n"  "$(_1p__extract "$JSON" id username)"
    printf "Password:,%s\n"    "********"

    totp="$(_1p__extract "$JSON" label "One-time password" totp)"
    if [ -n "$totp" ] ; then
        printf "OTP:,%s\n"  "$totp"
    fi
# | column -s, -t
) | tidy-viewer -eRD

section_id="$(_1p__b64decode <<< "$JSON" |
              jq -rc '.sections[]
                     | select(.label == "ADDITIONAL QUESTIONS")
                     | .id // empty' 2>&- )"

if [ -n "$section_id" ] ; then
    # shellcheck disable=SC2154
    printf "\n        \e[%sm%s\e[%sm"		  \
       "${color[reverse]}" "ADDITIONAL QUESTIONS" \
       "${color[none]}"
    {
      echo '__Challenge__,__Response__'
      _1p__b64decode <<< "$JSON"		| \
      jq -rc '.fields[]
             | select(.section.id == "'"$section_id"'")
             | [ .label, .value ]
             | @csv'
    # | column -s, -t
    } | tidy-viewer -eRD
fi

_1p__secret_to_clipboard "$JSON" id password
