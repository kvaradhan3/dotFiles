#! /bin/zsh
#
# shellcheck disable=SC2296,SC1090,SC1091
#

PROGNAME="$(basename "$0")"

usage() {
    printf "Usage: %s [-r] [-u]" "$PROGNAME"                      >&2
    print  "  -r    refresh contents, dont mess with .ORIG files" >&2
    print  "  -u    uninstall"                                    >&2
    exit 1
}

INSTALLOP=install
DESTDIR=$HOME
DEBUG=false
while getopts "Drud:" o; do
    case "${o}" in
        u)  INSTALLOP=uninstall   ;;
        d)  DESTDIR=$OPTARG       ;;
        D)  DEBUG=true            ;;
        *)  usage                 ;;
    esac
done
shift $((OPTIND-1))
$DEBUG && INSTALLOP='log'
export INSTALLOP

HERE="$(cd "$(dirname "$0")" && pwd)"

export DESTDIR HERE

. ./scripts/utilities

flist_init

(
    local RCBASE="$HERE"/common
    local AUTOTAG=()
    AUTOTAG+=(
      "Auto-generated on $(date) by $USER"
      "               running $(basename "$0") in $(pwd)"
      "               git-sha $(git rev-parse --short HEAD)"
      ""
    )

    pushd common || { log --error Unexpected error, directory '`common'"'" not found, exiting; exit 1; }
    {
        # shellcheck disable=SC2027,SC2086
        print  " ;;;\n" ";;; "${^AUTOTAG}"\n"
        printf '(defconst emacs-rc-dir "%s/dot.emacs.d/lib/init")\n' "$RCBASE"
    } > dot.emacs-rc-dir.el

    {
        # shellcheck disable=SC2027,SC2086
        print  " ###\n" "# "${^AUTOTAG}"\n"
        printf 'export ZDOTDIR="%s";\n'   "${ZDOTDIR:="$DESTDIR"}"
        # shellcheck disable=SC2016
        printf 'export ZDOTDIR_LOCAL="${ZDOTDIR_LOCAL:-"%s"}";\n' \
               "${RCBASE}/zshell"
        printf 'setopt NO_NOMATCH;'
    } > dot.zinit
    popd  || { log --error Unexpected error, pop directory failed, exiting; exit 1; }
)

setopt nonomatch
for i in common "$(uname -s)" ; do
    for j in "$i"/dot* ; do
	if [[ "$j" = "$i/dot*" ]] ; then
	    continue
	fi

	if [[ -f "$j" ]] ; then
	    ${INSTALLOP} "$HERE"/"$j" "$DESTDIR"/"${j/$i\/dot/}"
	else
	    find "$j" -type f | while read -r _src ; do
		local DESTBASE="${_src/$i\/dot/}"

		# shellcheck disable=SC2155
		local DESTLINK="$(dirname "${DESTBASE}")"

		if prefix_is_done "$DESTLINK" ; then
		    continue
		fi

		mkdir -p "$DESTDIR"/"$(dirname "${DESTLINK}")"
		${INSTALLOP} "$(dirname "$HERE"/"${_src}")" "${DESTDIR}"/"${DESTLINK}"
	    done
	fi
    done

    for j in "$i"/safeLink/dot* ; do
	if [[ "$j" = "$i/safeLink/dot*" ]] ; then
	    continue
	fi
	find "$j" -type f | while read -r _src ; do
	    local DESTBASE="${_src/$i\/safeLink\/dot/}"
	    mkdir -p "$DESTDIR"/"$(dirname "${DESTBASE}")"
	    ${INSTALLOP} "$HERE"/"${_src}" "${DESTDIR}"/"${DESTBASE}"
	done
    done

    if [[ -x "$i/software-install" ]]; then
    	. "$i/software-install"
    fi
done

#
# Protect the repo
#
pre-commit install --install-hooks

local stale_remaining=()
local __f

flist_done stale_remaining

# shellcheck disable=SC2068
for __f in in ${stale_remaining[@]} ; do
    log --info remove stale file "${__f}" point to "$(readlink "${__f}")"
done

rm -f "${stale_remaining[@]}"
